import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchCount } from "./uploadAPI";

//TODO: change iserror issuccess and iscancled to status
export interface UploaderState {
  isError: boolean;
  preview: string[] | undefined;
  files: File[];
  uploadProgress: number[];
  serverLoading: boolean;
  uploadXHR: XMLHttpRequest | null;
  isSuccess: boolean;
  isCanceled: boolean;
  // status: "idle" | "loading" | "failed";
}

const initialState: UploaderState = {
  isError: false,
  preview: [],
  files: [],
  uploadProgress: [],
  serverLoading: false,
  uploadXHR: null,
  isSuccess: false,
  isCanceled: false,
  // status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "upload/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const uploadSlice = createSlice({
  name: "upload",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPreview: (state, action: PayloadAction<string[]>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      state.preview = [...action.payload];
    },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = "failed";
  //     });
  // },
});

export const { setPreview } = uploadSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const isError = (state: RootState) => state.upload.isError;
export const previewItems = (state: RootState) => state.upload.preview;
export const files = (state: RootState) => state.upload.files;
export const uploadProgress = (state: RootState) => state.upload.uploadProgress;
export const serverLoading = (state: RootState) => state.upload.serverLoading;
export const uploadXHR = (state: RootState) => state.upload.uploadXHR;
export const isSuccess = (state: RootState) => state.upload.isSuccess;
export const isCanceled = (state: RootState) => state.upload.isCanceled;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default uploadSlice.reducer;
